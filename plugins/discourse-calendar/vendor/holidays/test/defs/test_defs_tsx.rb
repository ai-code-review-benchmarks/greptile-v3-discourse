# encoding: utf-8
require File.expand_path(File.dirname(__FILE__)) + '/../test_helper'

# This file is generated by the Ruby Holiday gem.
#
# Definitions loaded: definitions/tsx.yaml
class TsxDefinitionTests < Test::Unit::TestCase  # :nodoc:

  def test_tsx
    assert_equal "New Year's Day", (Holidays.on(Date.civil(2008, 1, 1), [:tsx], [:informal])[0] || {})[:name]

    assert_equal "Good Friday", (Holidays.on(Date.civil(2008, 3, 21), [:tsx], [:informal])[0] || {})[:name]

    assert_equal "Canada Day", (Holidays.on(Date.civil(2008, 7, 1), [:tsx], [:informal])[0] || {})[:name]

    assert_equal "Labour Day", (Holidays.on(Date.civil(2008, 9, 1), [:tsx], [:informal])[0] || {})[:name]

    assert_equal "Christmas Day", (Holidays.on(Date.civil(2008, 12, 25), [:tsx], [:informal])[0] || {})[:name]

    assert_nil (Holidays.on(Date.civil(1970, 2, 16), [:tsx])[0] || {})[:name]

    assert_nil (Holidays.on(Date.civil(1988, 2, 15), [:tsx])[0] || {})[:name]

    assert_nil (Holidays.on(Date.civil(1989, 2, 20), [:tsx])[0] || {})[:name]

    assert_nil (Holidays.on(Date.civil(2006, 2, 20), [:tsx])[0] || {})[:name]

    assert_nil (Holidays.on(Date.civil(2007, 2, 19), [:tsx])[0] || {})[:name]

    assert_equal "New Year's Day", (Holidays.on(Date.civil(2011, 1, 3), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "New Year's Day", (Holidays.on(Date.civil(2012, 1, 2), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "New Year's Day", (Holidays.on(Date.civil(2016, 1, 1), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Canada Day", (Holidays.on(Date.civil(2011, 7, 1), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Canada Day", (Holidays.on(Date.civil(2012, 7, 2), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Canada Day", (Holidays.on(Date.civil(2017, 7, 3), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Christmas Day", (Holidays.on(Date.civil(2010, 12, 25), [:tsx])[0] || {})[:name]

    assert_equal "Christmas Day", (Holidays.on(Date.civil(2018, 12, 25), [:tsx])[0] || {})[:name]

    assert_equal "Christmas Day", (Holidays.on(Date.civil(2022, 12, 25), [:tsx])[0] || {})[:name]

    assert_nil (Holidays.on(Date.civil(2022, 12, 25), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Christmas Day", (Holidays.on(Date.civil(2010, 12, 24), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Christmas Day", (Holidays.on(Date.civil(2012, 12, 25), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Christmas Day", (Holidays.on(Date.civil(2016, 12, 26), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Christmas Day", (Holidays.on(Date.civil(2021, 12, 27), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Christmas Day", (Holidays.on(Date.civil(2022, 12, 26), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Boxing Day", (Holidays.on(Date.civil(2010, 12, 27), [:tsx], [:observed])[0] || {})[:name]
assert_equal "Boxing Day", (Holidays.on(Date.civil(2012, 12, 26), [:tsx], [:observed])[0] || {})[:name]
assert_equal "Boxing Day", (Holidays.on(Date.civil(2015, 12, 28), [:tsx], [:observed])[0] || {})[:name]

    assert_equal "Victoria Day", (Holidays.on(Date.civil(2022, 5, 23), [:tsx])[0] || {})[:name]
assert_equal "Victoria Day", (Holidays.on(Date.civil(2021, 5, 24), [:tsx])[0] || {})[:name]

    assert_nil (Holidays.on(Date.civil(2015, 5, 24), [:tsx], [:observed])[0] || {})[:name]

  end
end
